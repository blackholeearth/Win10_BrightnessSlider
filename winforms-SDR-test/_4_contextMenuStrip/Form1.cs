using System;
using System.ComponentModel;
using System.Drawing;
using System.Windows.Forms;
using System.Runtime.InteropServices;
using System.Linq; // For CreateParams constants

// Ensure these namespaces match where your custom classes are defined
namespace winformsTests._4_contextMenuStrip
{
	public partial class Form1 : Form
	{
		// --- Win32 Constants for Window Styles (used in CreateParams) ---
		private const int WS_EX_APPWINDOW = 0x40000;
		protected override CreateParams CreateParams
		{
			get
			{
				CreateParams cp = base.CreateParams;
				if (!this.ShowInTaskbar)
				{
					cp.ExStyle &= ~WS_EX_APPWINDOW;
				}
				return cp;
			}
		}


		public Form1()
		{
			// This call is generated by the designer and initializes components
			// declared in Form1.Designer.cs (like ContextMenuStripEx1 and notifyIconEx1)
			InitializeComponent();

			// --- Create Menu Items (Use standard ToolStripMenuItem) ---
			// The PaddedToolStripDropDown logic will be applied automatically by ContextMenuStripEX

			var showMenuItem = new ToolStripMenuItem("Show Application");
			// Add click event handler (ensure method exists below or create it)
			showMenuItem.Click += ShowMenuItem_Click;

			var exitMenuItem = new ToolStripMenuItem("Exit");
			// Add click event handler (ensure method exists below or create it)
			exitMenuItem.Click += ExitMenuItem_Click;

			// --- Configure ContextMenuStripEX (Instance named ContextMenuStripEx1 from designer) ---
			// Clear existing items if any were added in the designer for testing
			this.ContextMenuStripEx1.Items.Clear();
			// Add the items created above
			this.ContextMenuStripEx1.Items.AddRange(new ToolStripItem[] {
				showMenuItem,
				new ToolStripSeparator(), // Add a separator line
                exitMenuItem
			});
			// Optional: Set Name property if needed for identification
			this.ContextMenuStripEx1.Name = "TrayContextMenu";

			// --- Add Sub-Items (Example) ---
			// Add some sub-items to the 'Show Application' menu item
			showMenuItem.DropDownItems.AddRange(new ToolStripItem[]{
				new ToolStripMenuItem("Sub Item 1"),
				new ToolStripMenuItem("Sub Item 2 (has children)"), // Still standard ToolStripMenuItem
                new ToolStripSeparator(),
				new ToolStripMenuItem("Sub Item 3")
			});

			// Add sub-sub-items (Example)
			// Find the "Sub Item 2" item using Linq (add `using System.Linq;` at top)
			var subItem2 = showMenuItem.DropDownItems.OfType<ToolStripMenuItem>()
									 .FirstOrDefault(item => item.Text == "Sub Item 2 (has children)");
			if (subItem2 != null)
			{
				subItem2.DropDownItems.AddRange(new ToolStripItem[] {
					 new ToolStripMenuItem("Sub-Sub A"),
					 new ToolStripMenuItem("Sub-Sub B")
				});
				// ContextMenuStripEX will ensure 'subItem2' uses PaddedToolStripDropDown
				// automatically when its DropDown is accessed.
			}


			// --- Configure NotifyIconEX (Instance named notifyIconEx1 from designer) ---
			// Make sure to set an icon! Otherwise, it might not appear.
			this.notifyIconEx1.Icon = SystemIcons.Information; // Use a system icon for testing
			this.notifyIconEx1.Text = "My Custom Tray App (EX Version)"; // Tooltip text
			this.notifyIconEx1.Visible = true;                 // Make the icon visible in the tray

			// *** Assign the custom ContextMenuStripEX to the NotifyIconEX ***
			this.notifyIconEx1.ContextMenuStrip = this.ContextMenuStripEx1;

			// *** Enable the custom Win11 style positioning for the main menu ***
			this.notifyIconEx1.UseWin11StylePosition = true;

			// Optional: Handle Left Click on the custom icon to show the form
			this.notifyIconEx1.MouseClick += NotifyIconEX1_MouseClick;


			// --- Standard Form Setup for a Tray Application ---
			this.ShowInTaskbar = false; // Hide from taskbar initially
										// Hook up Form Load and Closing events (ensure methods exist below)
			this.Load += Form1_Load;
			this.FormClosing += Form1_FormClosing; // Handle closing to minimize/hide
		}


		// --- Tray Application Logic ---

		private void Form1_Load(object sender, EventArgs e)
		{
			if (this.WindowState != FormWindowState.Minimized)
			{
				this.WindowState = FormWindowState.Minimized;
			}
		}

		// Helper method to show the form correctly
		private void ShowForm()
		{
			this.ShowInTaskbar = true;
			this.Show();
			this.WindowState = FormWindowState.Normal;
			this.BringToFront();
			this.Activate();
		}

		// Handle the form closing event to minimize to tray instead of exiting
		private void Form1_FormClosing(object sender, FormClosingEventArgs e)
		{
			if (e.CloseReason == CloseReason.UserClosing)
			{
				e.Cancel = true;
				this.WindowState = FormWindowState.Minimized;
				this.BeginInvoke((MethodInvoker)delegate
				{
					this.ShowInTaskbar = false;
				});
			}
		}

		private void ShowMenuItem_Click(object sender, EventArgs e) => ShowForm();

		private void ExitMenuItem_Click(object sender, EventArgs e) => Application.Exit();

		// Optional: Attached to the MouseClick event of NotifyIconEX
		private void NotifyIconEX1_MouseClick(object sender, MouseEventArgs e) 
		{
			if (e.Button == MouseButtons.Left)
			{
				ShowForm();
			}
		}
	}
}